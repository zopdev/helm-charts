// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go
//
// Generated by this command:
//
//	mockgen --source=interface.go --destination=mock_interface.go --package=github
//

// Package github is a generated GoMock package.
package github

import (
	context "context"
	reflect "reflect"

	github "github.com/google/go-github/v74/github"
	gomock "go.uber.org/mock/gomock"
)

// MockPullRequest is a mock of PullRequest interface.
type MockPullRequest struct {
	ctrl     *gomock.Controller
	recorder *MockPullRequestMockRecorder
	isgomock struct{}
}

// MockPullRequestMockRecorder is the mock recorder for MockPullRequest.
type MockPullRequestMockRecorder struct {
	mock *MockPullRequest
}

// NewMockPullRequest creates a new mock instance.
func NewMockPullRequest(ctrl *gomock.Controller) *MockPullRequest {
	mock := &MockPullRequest{ctrl: ctrl}
	mock.recorder = &MockPullRequestMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPullRequest) EXPECT() *MockPullRequestMockRecorder {
	return m.recorder
}

// ListFiles mocks base method.
func (m *MockPullRequest) ListFiles(ctx context.Context, owner, repo string, number int, opts *github.ListOptions) ([]*github.CommitFile, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFiles", ctx, owner, repo, number, opts)
	ret0, _ := ret[0].([]*github.CommitFile)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListFiles indicates an expected call of ListFiles.
func (mr *MockPullRequestMockRecorder) ListFiles(ctx, owner, repo, number, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFiles", reflect.TypeOf((*MockPullRequest)(nil).ListFiles), ctx, owner, repo, number, opts)
}
