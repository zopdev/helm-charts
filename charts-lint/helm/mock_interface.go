// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go
//
// Generated by this command:
//
//	mockgen --source=interface.go --destination=mock_interface.go --package=helm
//

// Package helm is a generated GoMock package.
package helm

import (
	io "io"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	action "helm.sh/helm/v3/pkg/action"
)

// Mockdependency is a mock of dependency interface.
type Mockdependency struct {
	ctrl     *gomock.Controller
	recorder *MockdependencyMockRecorder
	isgomock struct{}
}

// MockdependencyMockRecorder is the mock recorder for Mockdependency.
type MockdependencyMockRecorder struct {
	mock *Mockdependency
}

// NewMockdependency creates a new mock instance.
func NewMockdependency(ctrl *gomock.Controller) *Mockdependency {
	mock := &Mockdependency{ctrl: ctrl}
	mock.recorder = &MockdependencyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockdependency) EXPECT() *MockdependencyMockRecorder {
	return m.recorder
}

// List mocks base method.
func (m *Mockdependency) List(arg0 string, arg1 io.Writer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// List indicates an expected call of List.
func (mr *MockdependencyMockRecorder) List(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*Mockdependency)(nil).List), arg0, arg1)
}

// Mockmanager is a mock of manager interface.
type Mockmanager struct {
	ctrl     *gomock.Controller
	recorder *MockmanagerMockRecorder
	isgomock struct{}
}

// MockmanagerMockRecorder is the mock recorder for Mockmanager.
type MockmanagerMockRecorder struct {
	mock *Mockmanager
}

// NewMockmanager creates a new mock instance.
func NewMockmanager(ctrl *gomock.Controller) *Mockmanager {
	mock := &Mockmanager{ctrl: ctrl}
	mock.recorder = &MockmanagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockmanager) EXPECT() *MockmanagerMockRecorder {
	return m.recorder
}

// Update mocks base method.
func (m *Mockmanager) Update() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update")
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockmanagerMockRecorder) Update() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*Mockmanager)(nil).Update))
}

// Mocklinter is a mock of linter interface.
type Mocklinter struct {
	ctrl     *gomock.Controller
	recorder *MocklinterMockRecorder
	isgomock struct{}
}

// MocklinterMockRecorder is the mock recorder for Mocklinter.
type MocklinterMockRecorder struct {
	mock *Mocklinter
}

// NewMocklinter creates a new mock instance.
func NewMocklinter(ctrl *gomock.Controller) *Mocklinter {
	mock := &Mocklinter{ctrl: ctrl}
	mock.recorder = &MocklinterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mocklinter) EXPECT() *MocklinterMockRecorder {
	return m.recorder
}

// Run mocks base method.
func (m *Mocklinter) Run(paths []string, vals map[string]any) *action.LintResult {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", paths, vals)
	ret0, _ := ret[0].(*action.LintResult)
	return ret0
}

// Run indicates an expected call of Run.
func (mr *MocklinterMockRecorder) Run(paths, vals any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*Mocklinter)(nil).Run), paths, vals)
}
