{{- /* Generate domain name for first zero in cluster */}}
{{- define "peer_zero" -}}
  {{- $zeroFullName := include "dgraph.zero.fullname" . -}}

  {{- $domainSuffix := ".cluster.local" -}}

  {{- printf "%s-%d.%s-headless.${POD_NAMESPACE}.svc%s:5080" $zeroFullName 0 $zeroFullName $domainSuffix -}}
{{- end -}}
{{- /* Superflag (v21.03.0) support and legacy flags */}}
{{- define "raft_index_flag" -}}
  {{- $safeVersion := include "dgraph.version" . -}}
  {{- if semverCompare ">= 21.03.0" $safeVersion -}}
    {{- printf "--raft idx=" -}}
  {{- else -}}
    {{- printf "--idx " -}}
  {{- end -}}
{{- end -}}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: "{{ template "dgraph.zero.fullname" . }}"
  namespace: {{ include "dgraph.namespace" . }}
  labels:
    app: {{ template "dgraph.name" . }}
    chart: {{ template "dgraph.chart" . }}
    component: "zero"
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  serviceName: {{ template "dgraph.zero.fullname" . }}-headless
  replicas: 1
  podManagementPolicy: "Parallel"
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app: {{ template "dgraph.name" . }}
      chart: {{ template "dgraph.chart" . }}
      release: {{ .Release.Name }}
      component: "zero"
  template:
    metadata:
      name: {{ template "dgraph.zero.fullname" . }}
      annotations:
        prometheus.io/path: /debug/prometheus_metrics
        prometheus.io/port: "6080"
        prometheus.io/scrape: "true"
      labels:
        app: {{ template "dgraph.name" . }}
        chart: {{ template "dgraph.chart" . }}
        release: {{ .Release.Name }}
        component: "zero"
    spec:
      serviceAccountName: dgraph
      automountServiceAccountToken: true
      {{- if .Values.zero.schedulerName }}
      schedulerName: {{ .Values.zero.schedulerName }}
      {{- end }}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: component
                  operator: In
                  values:
                  - zero
              topologyKey: "kubernetes.io/hostname"
      containers:
      - name: {{ template "dgraph.zero.fullname" . }}
        image: {{ template "dgraph.image" . }}
        ports:
        - containerPort: 5080
          name: grpc-zero
        - containerPort: 6080
          name: http-zero
        env:
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace

        command:
          - bash
          - "-c"
          - |
            set -ex
            [[ `hostname` =~ -([0-9]+)$ ]] || exit 1
              ordinal=${BASH_REMATCH[1]}
              idx=$(($ordinal + 1))
              if [[ $ordinal -eq 0 ]]; then
                exec dgraph zero --my=$(hostname -f | awk '{gsub(/\.$/,""); print $0}'):5080 {{ template "raft_index_flag" . }}$idx --replicas 5
              else
                exec dgraph zero --my=$(hostname -f | awk '{gsub(/\.$/,""); print $0}'):5080 --peer {{ template "peer_zero" . }} {{ template "raft_index_flag" . }}$idx --replicas 5 
              fi
        resources:
{{ toYaml .Values.zero.resources | indent 10 }}
        livenessProbe:
          httpGet:
            port: 6080
            path: /health
          initialDelaySeconds: 15
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 6
        readinessProbe:
          httpGet:
            port: 6080
            path: /state
          initialDelaySeconds: 15
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 6
        volumeMounts:
        - name: datadir
          mountPath: /dgraph
      terminationGracePeriodSeconds: 60
      volumes:
      - name: datadir
        persistentVolumeClaim:
          claimName: datadir
  volumeClaimTemplates:
    - metadata:
        name: datadir
        annotations:
          volume.alpha.kubernetes.io/storage-class: anything
      spec:
        accessModes: 
          - ReadWriteOnce
        resources:
          requests:
            storage: {{ .Values.zero.diskSize }}
        storageClassName: ""
