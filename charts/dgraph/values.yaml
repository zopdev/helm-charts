image: &image
  registry: docker.io
  repository: dgraph/dgraph
  tag: v24.0.5
  debug: false

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: dgraph
  # automatically mount a ServiceAccount API credentials
  # ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/#opt-out-of-api-credential-automounting
  automountServiceAccountToken: true

zero:
  name: zero
  metrics:
    enabled: true

  ## StatefulSet spec.template.metadata.annotations
  extraAnnotations: {}

  ## StatefulSet spec.template.metadata.labels
  podLabels: {}

  monitorLabel: zero-dgraph-io
  ## StatefulSet controller supports automated updates. There are two valid update strategies: RollingUpdate and OnDelete
  ## ref: https://kubernetes.io/docs/tutorials/stateful-application/basic-stateful-set/#updating-statefulsets
  ##
  updateStrategy: RollingUpdate

  ## Scheduler name
  ## https://kubernetes.io/docs/tasks/administer-cluster/configure-multiple-schedulers/
  ##
  # schedulerName: stork

  ## Partition update strategy
  ## https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/#partitions
  ##
  # rollingUpdatePartition:

  ## StatefulSet controller supports relax its ordering guarantees while preserving its uniqueness and identity guarantees. There are two valid pod management policies: OrderedReady and Parallel
  ## ref: https://kubernetes.io/docs/tutorials/stateful-application/basic-stateful-set/#pod-management-policy
  ##
  podManagementPolicy: Parallel

  ## Number of dgraph zero pods
  ##
  replicaCount: 1

  ## Max number of replicas per data shard.
  ## i.e., the max number of Dgraph Alpha instances per group (shard).
  ##
  shardReplicaCount: 5

  ## zero server pod termination grace period
  ##
  terminationGracePeriodSeconds: 60

  ## Hard means that by default pods will only be scheduled if there are enough nodes for them
  ## and that they will never end up on the same node. Setting this to soft will do this "best effort"
  antiAffinity: soft

  ## By default this will make sure two pods don't end up on the same node
  ## Changing this to a region would allow you to spread pods across regions
  podAntiAffinitytopologyKey: "kubernetes.io/hostname"

  ## This is the node affinity settings as defined in
  ## https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#node-affinity-beta-feature
  nodeAffinity: {}

  ## Extra environment variables loaded from configmap(s) and/or secret(s)
  envFrom: []

  ## Extra environment variables which will be appended to the env: definition for the container.
  extraEnvs: []

  ## Extra flags for command line flags in command
  extraFlags: ""

  ## Configuration file for dgraph zero used as an alternative to command-line options
  ## Ref: https://dgraph.io/docs/deploy/config/
  configFile: {}

  # automatically mount a ServiceAccount API credentials
  # ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/#opt-out-of-api-credential-automounting
  automountServiceAccountToken: true

  ## Kubernetes configuration
  ## For minikube, set this to NodePort, elsewhere use LoadBalancer
  ##
  service:
    type: ClusterIP    # All hostnames must be listed for grpc + https ingress shared cert secret

    labels: {}
    annotations: {}
    ## StatefulSet pods will need to have addresses published in order to
    ## communicate to each other in order to enter a ready state.
    publishNotReadyAddresses: true

    ## References:
    ##  * General: https://kubernetes.io/docs/concepts/services-networking/service/#loadbalancer
    ##  * GKE: https://cloud.google.com/kubernetes-engine/docs/how-to/internal-load-balancing#lb_subnet
    ##  * AKS: https://docs.microsoft.com/en-us/azure/aks/ingress-static-ip
    loadBalancerIP: ""

    ## References:
    ## * General: https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/#preserving-the-client-source-ip
    ## * EKS: https://aws.amazon.com/blogs/opensource/network-load-balancer-support-in-kubernetes-1-9/
    ## * AKS: https://docs.microsoft.com/en-us/azure/aks/load-balancer-standard#maintain-the-clients-ip-on-inbound-connections
    externalTrafficPolicy: ""

    ## References:
    ## * General: https://kubernetes.io/docs/concepts/services-networking/service/#aws-nlb-support
    ## * GKE: https://cloud.google.com/kubernetes-engine/docs/concepts/security-overview#filtering_load_balanced_traffic
    ## * EKS: https://aws.amazon.com/premiumsupport/knowledge-center/eks-cidr-ip-address-loadbalancer/
    ## * AKS: https://docs.microsoft.com/en-us/azure/aks/load-balancer-standard#restrict-inbound-traffic-to-specific-ip-ranges
    loadBalancerSourceRanges: []
  serviceHeadless:
    labels: {}

  ## dgraph Pod Security Context
  securityContext:
    enabled: false
    fsGroup: 1001
    runAsUser: 1001

  ## TLS Configuration
  tls:
    enabled: false
    ## Files created from './tls' directory set with `dgraph cert` command
    ## Can use make_tls_secrets.sh to generate secrets.yaml
    files: {}


  ## dgraph data Persistent Volume Storage Class
  ## If defined, storageClassName: <storageClass>
  ## If set to "-", storageClassName: "", which disables dynamic provisioning
  ## If undefined (the default) or set to null, no storageClassName spec is
  ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
  ##   GKE, AWS & OpenStack)
  ##
  persistence:
    enabled: true
    accessModes:
      - ReadWriteOnce
    size: 10Gi

  ## Node labels and tolerations for pod assignment
  ## ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#nodeselector
  ## ref: https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration/
  ##
  nodeSelector: {}
  tolerations: []

  ## Configure resource requests
  ## ref: http://kubernetes.io/docs/user-guide/compute-resources/
  ##
  resources:
    requests:
      cpu: "100m"
      memory: "100M"
    limits:
      cpu: "1000m"
      memory: "1Gi"
  ## Configure extra options for startup, liveness and readiness probes.
  ## NOTE: startupProbe only support in Kubernetes v1.16+
  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/#configure-probes)
  ##
  startupProbe:
    enabled: false
    port: 6080
    path: /health
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 6
    successThreshold: 1

  livenessProbe:
    enabled: true
    port: 6080
    path: /health
    initialDelaySeconds: 15
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 6
    successThreshold: 1

  readinessProbe:
    enabled: true
    port: 6080
    path: /state
    initialDelaySeconds: 15
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 6
    successThreshold: 1

  ## Custom liveness and readiness probes
  customStartupProbe: {}
  customLivenessProbe: {}
  customReadinessProbe: {}

alpha:
  name: alpha
  metrics:
    enabled: true

  ## StatefulSet spec.template.metadata.annotations
  extraAnnotations: {}

  ## StatefulSet spec.template.metadata.labels
  podLabels: {}

  monitorLabel: alpha-dgraph-io
  ## StatefulSet controller supports automated updates. There are two valid update strategies: RollingUpdate and OnDelete
  ## ref: https://kubernetes.io/docs/tutorials/stateful-application/basic-stateful-set/#updating-statefulsets
  ##
  updateStrategy: RollingUpdate

  ## Scheduler name
  ## https://kubernetes.io/docs/tasks/administer-cluster/configure-multiple-schedulers/
  ##
  # schedulerName: stork

  ## Partition update strategy
  ## https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/#partitions
  ##
  # rollingUpdatePartition:

  ## StatefulSet controller supports relax its ordering guarantees while preserving its uniqueness and identity guarantees. There are two valid pod management policies: OrderedReady and Parallel
  ## ref: https://kubernetes.io/docs/tutorials/stateful-application/basic-stateful-set/#pod-management-policy
  ##
  podManagementPolicy: Parallel

  ## Number of dgraph nodes
  ##
  replicaCount: 1

  ## alpha server pod termination grace period
  ##
  terminationGracePeriodSeconds: 600

  ## Hard means that by default pods will only be scheduled if there are enough nodes for them
  ## and that they will never end up on the same node. Setting this to soft will do this "best effort"
  antiAffinity: soft

  ## By default this will make sure two pods don't end up on the same node
  ## Changing this to a region would allow you to spread pods across regions
  podAntiAffinitytopologyKey: "kubernetes.io/hostname"

  ## This is the node affinity settings as defined in
  ## https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#node-affinity-beta-feature
  nodeAffinity: {}

  ## Extra environment variables loaded from configmap(s) and/or secret(s)
  envFrom: []

  ## Extra environment variables which will be appended to the env: definition for the container.
  extraEnvs: []
    # - name: AWS_ACCESS_KEY_ID
    #   value: "XXXXXXXXXXXXXXXXXXXX"
    # - name: AWS_SECRET_ACCESS_KEY
    #   value: "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"

  ## Extra flags for command line flags in command
  extraFlags: ""

  ## Configuration file for dgraph alpha used as an alternative to command-line options
  ## Ref: https://dgraph.io/docs/deploy/config/
  configFile: {}

  # automatically mount a ServiceAccount API credentials
  # ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/#opt-out-of-api-credential-automounting
  automountServiceAccountToken: true

  ## Kubernetes configuration
  ## For minikube, set this to NodePort, elsewhere use LoadBalancer
  ##
  service:
    type: ClusterIP
    labels: {}
    annotations: {}
    ## StatefulSet pods will need to have addresses published in order to
    ## communicate to each other in order to enter a ready state.
    publishNotReadyAddresses: true

    ## References:
    ##  * General: https://kubernetes.io/docs/concepts/services-networking/service/#loadbalancer
    ##  * GKE: https://cloud.google.com/kubernetes-engine/docs/how-to/internal-load-balancing#lb_subnet
    ##  * AKS: https://docs.microsoft.com/en-us/azure/aks/ingress-static-ip
    loadBalancerIP: ""

    ## References:
    ## * General: https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/#preserving-the-client-source-ip
    ## * EKS: https://aws.amazon.com/blogs/opensource/network-load-balancer-support-in-kubernetes-1-9/
    ## * AKS: https://docs.microsoft.com/en-us/azure/aks/load-balancer-standard#maintain-the-clients-ip-on-inbound-connections
    externalTrafficPolicy: ""

    ## References:
    ## * General: https://kubernetes.io/docs/concepts/services-networking/service/#aws-nlb-support
    ## * GKE: https://cloud.google.com/kubernetes-engine/docs/concepts/security-overview#filtering_load_balanced_traffic
    ## * EKS: https://aws.amazon.com/premiumsupport/knowledge-center/eks-cidr-ip-address-loadbalancer/
    ## * AKS: https://docs.microsoft.com/en-us/azure/aks/load-balancer-standard#restrict-inbound-traffic-to-specific-ip-ranges
    loadBalancerSourceRanges: []
  serviceHeadless:
    labels: {}
  ## alpha ingress resource configuration
  ## This requires an ingress controller to be installed into your k8s cluster
  ingress:
    enabled: false
    # ingressClassName: nginx
    # hostname: ""
    # annotations: {}
    # tls: {}

  ## alpha GRPC ingress resource configuration
  ## This requires an ingress controller to be installed into your k8s cluster
  ingress_grpc:
    enabled: false
    # ingressClassName: nginx
    # hostname: ""
    # annotations: {}
    # tls: {}

  ## dgraph Pod Security Context
  securityContext:
    enabled: false
    fsGroup: 1001
    runAsUser: 1001

  ## TLS Configuration
  ## Documentation on dgraph alpha TLS options,
  ##  see https://dgraph.io/docs/deploy/security/tls-configuration/#tls-options
  tls:
    enabled: false
    ## Files created from './tls' directory set with `dgraph cert` command
    ## Can use make_tls_secrets.sh to generate secrets.yaml
    files: {}

  ## ACL Configuration
  ## Documentation on Enterprise ACL Feature
  ##  see https://dgraph.io/docs/enterprise-features/access-control-lists/
  acl:
    enabled: false
    ## The values in `file: {}` will be the filename as key and the file data as the value.
    ## Make sure that the filename key matches the dgraph configuration of `acl_secret_file`
    # file:
    #   ## value for 1234567890123456789012345678901
    #   ## Note that Kubernetes secrets must be base64-encoded
    #   hmac_secret_file: MTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMQo=

  ## Encryption at Rest Configuration
  ## Documentation on Enterprise ACL Feature
  ##  see https://dgraph.io/docs/enterprise-features/encryption-at-rest/
  encryption:
    enabled: false
    ## The values in `file: {}` will be the filename as key and the file data as the value.
    ## Make sure that the filename key matches the dgraph configuration of `encryption_key_file`
    # file:
    #   ## value for 123456789012345
    #   ## Note that Kubernetes secrets must be base64-encoded
    #   enc_key_file: MTIzNDU2Nzg5MDEyMzQ1Cg==

  ## dgraph data Persistent Volume Storage Class
  ## If defined, storageClassName: <storageClass>
  ## If set to "-", storageClassName: "", which disables dynamic provisioning
  ## If undefined (the default) or set to null, no storageClassName spec is
  ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
  ##   GKE, AWS & OpenStack)
  ##
  persistence:
    enabled: true
    # storageClass: "-"
    accessModes:
      - ReadWriteOnce
    size: 100Gi
    annotations: {}

  ## Node labels and tolerations for pod assignment
  ## ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#nodeselector
  ## ref: https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration/
  ##
  nodeSelector: {}
  tolerations: []

  ## Configure resource requests
  ## ref: http://kubernetes.io/docs/user-guide/compute-resources/
  ##
  resources:
    requests:
      cpu: "100m"
      memory: "100M"
    limits:
      cpu: "1000m"
      memory: "1Gi"

  ## Configure extra options for startup, liveness and readiness probes
  ## NOTE: startupProbe only support in Kubernetes v1.16+
  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/#configure-probes)
  ##
  startupProbe:
    enabled: false
    port: 8080
    path: /health?live=1
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 30
    successThreshold: 1

  livenessProbe:
    enabled: true
    port: 8080
    path: /health?live=1
    initialDelaySeconds: 15
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 6
    successThreshold: 1

  readinessProbe:
    enabled: true
    port: 8080
    path: /probe/graphql
    initialDelaySeconds: 15
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 6
    successThreshold: 1

  ## Custom liveness and readiness probes
  customStartupProbe: {}
  customLivenessProbe: {}
  customReadinessProbe: {}
  
  # Enables extra init containers to be added to the alpha statefulset
  extraInitContainers: []

  ## You may want to initialize the Alphas with data before starting Alpha containers.
  ## Examples can include:
  initContainers:
    init:
      enabled: false
      # Adds environment variables for the alpha init container
      env: []
      envFrom: []
      image:
        << : *image
      command:
        - bash
        - "-c"
        - |
          trap "exit" SIGINT SIGTERM
          echo "Write to /dgraph/doneinit when ready."
          until [ -f /dgraph/doneinit ]; do sleep 2; done          
      ## Configure resource requests
      ## ref: http://kubernetes.io/docs/user-guide/compute-resources/
      ##
      ## resources:
      ##   requests:
      ##     memory: 256Mi
      ##     cpu: 250m
      ##   limits:
      ##     memory: 1Gi
      ##     cpu: 1
global:
  domain: cluster.local
  ## This requires an ingress controller to be installed into your k8s cluster
  ingress:
    enabled: false
    ingressClassName: null
    annotations: {}
    tls: {}
    alpha_hostname: null
  ingress_grpc:
    enabled: false
    ingressClassName: null
    annotations: {}
    tls: {}
    alpha_grpc_hostname: null
