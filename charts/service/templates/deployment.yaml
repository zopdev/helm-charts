apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    configmap.reloader.stakater.com/reload: "{{ .Values.name }}"
  name: {{ .Values.name }}
  labels:
    app: {{ .Values.name }}
spec:
  replicas: {{ .Values.minReplicas }}
  selector:
    matchLabels:
      app: {{ .Values.name }}
  template:
    metadata:
      labels:
        app: {{ .Values.name }}
    spec:
      securityContext:
        {{- if and (hasKey .Values.volumeMounts "pvc") (not (empty .Values.volumeMounts.pvc)) }}
        fsGroup: 1000
        {{- end }}
      {{- if .Values.imagePullSecrets}}
      imagePullSecrets:
        {{- range $v := .Values.imagePullSecrets }}
        - name: {{ . }}
        {{- end }}
      {{- end }}
      {{- if .Values.appSecrets }}
      serviceAccountName: secrets-account
      {{- end }}
      volumes:
      {{- if .Values.volumeMounts }}
      {{- range $k,$v := .Values.volumeMounts.emptyDir }}
        - name: {{ $v.name }}
          emptyDir: {}
      {{- end }}
      {{- range $k,$v := .Values.volumeMounts.configmaps }}
        - name: {{ $v.name }}
          configMap:
            name: {{ $v.name }}
      {{- end }}
      {{- range $k,$v := .Values.volumeMounts.secrets }}
        - name: {{ $v.name }}
          secret:
            secretName: {{ $v.name }}
      {{- end }}
      {{- range $k,$v := .Values.volumeMounts.pvc }}
        - name: {{ $v.name }}
          persistentVolumeClaim:
            claimName: {{ $v.name }}
      {{- end }}
      {{- end }}
      {{- if .Values.appSecrets }}
        - name: app-secrets
          csi:
            driver: secrets-store.csi.k8s.io
            readOnly: true
            volumeAttributes:
              secretProviderClass: "{{ .Values.name }}-secrets-application"
      {{- end }}
      {{- if .Values.initContainer }}
      initContainers:
        - name: {{ .Values.name }}-init
          image: {{ .Values.initContainer.image }}
          {{- if .Values.initContainer.args }}
          args: {{ .Values.initContainer.args }}
          {{- end }}
          env:
            {{- range $k,$v := .Values.initContainer.env }}
            - name: {{ $k | quote }}
              value: {{ $v | quote }}
            {{- end }}
            {{- range $k,$v := .Values.initContainer.secrets }}
            - name: {{ $k | quote }}
              valueFrom:
                secretKeyRef:
                  name: {{.Values.appSecrets}}
                  key:  {{ $v | quote }}
      {{- end }}
      {{- end }}
      containers:
        - name: {{ .Values.name }}
          image: {{ .Values.image }}

          securityContext:
            {{- with .Values.Containers }}
            {{- if .privileged | default false }}
            privileged: true
            {{- end }}
            {{- end }}
            {{- if and (hasKey .Values.volumeMounts "pvc") (not (empty .Values.volumeMounts.pvc)) }}
            runAsUser: 1000
            runAsGroup: 1000
            {{- end }}
          ports:
            - name: http-port
              containerPort: {{ .Values.httpPort }}
            {{- if and .Values.metricsPort (ne (int .Values.metricsPort) 0) }}
            - name: metrics-port
              containerPort: {{ .Values.metricsPort }}
            {{- end}}
            {{- range $k, $v := .Values.ports}}
            - name: {{ $k }}
              containerPort: {{ $v }}
              {{- end }}
          envFrom:
            {{- range $i, $name := .Values.envFrom.configmaps }}
            - configMapRef:
                name: {{ $name }}
            {{- end }}
            {{- range $i, $name := .Values.envFrom.secrets }}
            - secretRef:
                name: {{ $name }}
                {{- end }}
            {{- if and .Values.datastores .Values.datastores.mysql }}
            {{- range $i, $k := .Values.datastores.mysql }}
            - configMapRef:
                name: {{ $k.datastore }}-{{ $k.database }}-{{ $.Release.Name}}-mysql-configmap
            - secretRef:
                name: {{ $k.datastore }}-{{ $k.database }}-{{ $.Release.Name}}-mysql-database-secret
            {{- end }}
            {{- end }}
            {{- if and .Values.datastores .Values.datastores.postgres }}
            {{- range $i, $k := .Values.datastores.postgres }}
            - configMapRef:
                name: {{ $k.datastore }}-{{ $k.database }}-{{ $.Release.Name}}-postgres-configmap
            - secretRef:
                name: {{ $k.datastore }}-{{ $k.database }}-{{ $.Release.Name}}-postgres-database-secret
            {{- end }}
            {{- end }}
            {{- if and .Values.datastores .Values.datastores.redis }}
            {{- range $i, $k := .Values.datastores.redis }}
            - configMapRef:
                name: {{ $k.datastore }}-redis-service-configmap
            {{- end }}
            {{- end }}
            {{- if and .Values.datastores .Values.datastores.solr }}
            {{- range $i, $k := .Values.datastores.solr }}
            - configMapRef:
                name: {{ $k.datastore }}-{{ $.Release.Name}}-solr-configmap
            {{- end }}
            {{- end }}
            {{- if and .Values.datastores .Values.datastores.surrealdb }}
            {{- range $i, $k := .Values.datastores.surrealdb }}
            - configMapRef:
                name: {{ $k.datastore }}-surrealdb-service-configmap
            {{- end }}
            {{- end }}
            {{- if and .Values.datastores .Values.datastores.opentsdb }}
            {{- range $i, $k := .Values.datastores.opentsdb }}
            - configMapRef:
                name: {{ $k.datastore }}-opentsdb-configmap
            {{- end }}
            {{- end }}
            {{- if and .Values.datastores .Values.datastores.dgraph }}
            {{- range $i, $k := .Values.datastores.dgraph }}
            - configMapRef:
                name: {{ $k.datastore }}-dgraph-configmap
            {{- end }}
            {{- end }}
            {{- if and .Values.datastores .Values.datastores.chromadb }}
            {{- range $i, $k := .Values.datastores.chromadb }}
            - configMapRef:
                name: {{ $k.datastore }}-chromadb-configmap
            {{- end }}
            {{- end }}
            {{- if and .Values.datastores .Values.datastores.mariadb }}
            {{- range $i, $k := .Values.datastores.mariadb }}
            - configMapRef:
                name: {{ $k.datastore }}-{{ $k.database }}-{{ $.Release.Name}}-mariadb-configmap
            - secretRef:
                name: {{ $k.datastore }}-{{ $k.database }}-{{ $.Release.Name}}-mariadb-database-secret
            {{- end }}
            {{- end }}
            {{- if and .Values.datastores .Values.datastores.cockroachdb }}
            {{- range $i, $k := .Values.datastores.cockroachdb }}
            - configMapRef:
                name: {{ $k.datastore }}-{{ $k.database }}-{{ $.Release.Name}}-cockroachdb-configmap
            {{- end }}
            {{- end }}
            {{- if and .Values.datastores .Values.datastores.cassandra }}
            {{- range $i, $k := .Values.datastores.cassandra }}
            - configMapRef:
                name: {{ $k.datastore }}-{{ $k.database }}-{{ $.Release.Name}}-cassandra-configmap
            - secretRef:
                name: {{ $k.datastore }}-{{ $k.database }}-{{ $.Release.Name}}-cassandra-database-secret
            {{- end }}
            {{- end }}
            {{- if and .Values.datastores .Values.datastores.redisdistributed }}
            {{- range $i, $k := .Values.datastores.redisdistributed }}
            - configMapRef:
                name: {{ $k.datastore }}-redis-values-configmap
            {{- end }}
            {{- end }}
            {{- if and .Values.datastores .Values.datastores.scylladb }}
            {{- range $i, $k := .Values.datastores.scylladb }}
            - configMapRef:
                name: {{ $k.datastore }}-{{ $k.database }}-{{ $.Release.Name}}-scylladb-configmap
            - secretRef:
                name: {{ $k.datastore }}-{{ $k.database }}-{{ $.Release.Name}}-scylladb-database-secret
            {{- end }}
            {{- end }}
            {{- if and .Values.datastores .Values.datastores.kafka }}
            {{- range $i, $k := .Values.datastores.kafka }}
            - configMapRef:
                name: {{ $k.datastore }}-kafka-configmap
            {{- end }}
            {{- end }}
          env:
            {{- range $k,$v := .Values.env }}
              {{- if ne (toString $v) ""}}
            - name: {{ $k | quote }}
              value: {{ $v | quote }}
              {{- end }}
            {{- end }}
          volumeMounts:
          {{- if .Values.volumeMounts }}
          {{- range $k,$v := .Values.volumeMounts.configmaps }}
            - name: {{ $v.name }}
              mountPath: {{ $v.mountPath }}
            {{- if ne $v.subPath "" }}
              subPath: {{ $v.subPath }}
            {{- end }}
          {{- end }}
          {{- range $k,$v := .Values.volumeMounts.emptyDir }}
            - name: {{ $v.name }}
              mountPath: {{ $v.mountPath }}
                  {{- if ne $v.subPath "" }}
              subPath: {{ $v.subPath }}
                  {{- end }}
          {{- end }}
          {{- range $k,$v := .Values.volumeMounts.secrets }}
            - name: {{ $v.name }}
              mountPath: {{ $v.mountPath }}
            {{- if ne $v.subPath "" }}
              subPath: {{ $v.subPath }}
            {{- end }}
          {{- end }}
          {{- range $k,$v := .Values.volumeMounts.pvc }}
            - name: {{ $v.name }}
              mountPath: {{ $v.mountPath }}
            {{- if ne $v.subPath "" }}
              subPath: {{ $v.subPath }}
            {{- end }}
          {{- end }}
          {{- end }}
            # Volume mount is required for the secret to sync with kubernetes secret
          {{- if .Values.appSecrets }}
            - name: app-secrets
              mountPath: "/mnt/secrets-store"
              readOnly: true
          {{- end }}
          resources:
            requests:
              memory: {{.Values.minMemory | quote }}
              cpu: {{.Values.minCPU | quote }}
            limits:
            {{- if ne .Values.maxMemory "" }}
              memory: {{.Values.maxMemory| quote }}
            {{- end }}
            {{- if ne .Values.maxCPU "" }}
              cpu: {{.Values.maxCPU | quote }}
            {{- end }}
          {{- if .Values.readinessProbe.enable }}
          readinessProbe:
            {{- if .Values.cliService }}
            exec:
              command:
                - ls
            {{- else if ne .Values.heartbeatURL "" }}
            httpGet:
              path: {{ .Values.heartbeatURL | quote}}
              port: {{ .Values.httpPort }}
            {{- end }}
            initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds | default 3 }}
            timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds | default 3 }}
            periodSeconds: {{ .Values.readinessProbe.periodSeconds |default 10 }}
            failureThreshold: {{ .Values.readinessProbe.failureThreshold | default 3 }}
          {{- end }}
          {{- if .Values.livenessProbe.enable }}
          livenessProbe:
            {{- if .Values.cliService }}
            exec:
              command:
                - ls
            {{ else if ne .Values.heartbeatURL ""}}
            httpGet:
              path: {{ .Values.heartbeatURL | quote }}
              port: {{ .Values.httpPort }}
            {{- end }}
            initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds | default 3 }}
            timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds | default 3 }}
            periodSeconds: {{ .Values.livenessProbe.periodSeconds | default 10 }}
            failureThreshold: {{ .Values.livenessProbe.failureThreshold | default 3 }}
          {{- end }}
---