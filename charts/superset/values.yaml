image:
  repository: apachesuperset.docker.scarf.sh/apache/superset
  tag: 4.1.1
  pullPolicy: IfNotPresent

imagePullSecrets: []

initImage:
  repository: apache/superset
  tag: dockerize
  pullPolicy: IfNotPresent

runAsUser: 0

secretEnv:
  create: true

bootstrapScript: |
  #!/bin/bash
  pip install psycopg2-binary==2.9.6 \
    sqlalchemy-bigquery==1.6.1 \
    elasticsearch-dbapi==0.2.5 &&\
  if [ ! -f ~/bootstrap ]; then echo "Running Superset with uid {{ .Values.runAsUser }}" > ~/bootstrap; fi

extraSecretEnv:

extraConfigs: {}

configOverrides: 

configMountPath: "/app/pythonpath"
extraConfigMountPath: "/app/configs"

service:
  type: ClusterIP
  port: 8088
  annotations: {}

resources:
  requests:
    cpu: 250m
    memory: 250Mi 
  limits:
    cpu: 500m
    memory: 500Mi

# SuperSet Configs
supersetNode:
  replicas:
    enabled: true
    replicaCount: 1 

  autoscaling:
    enabled: true
    minReplicas: 1
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80

  podDisruptionBudget:
    enabled: false
    minAvailable: 1
    # maxUnavailable: 1

  command:
    - "/bin/sh"
    - "-c"
    - ". {{ .Values.configMountPath }}/superset_bootstrap.sh; /usr/bin/run-server.sh"

  connections:
    # Redis Configs
    redis_host: "{{ .Release.Name }}-redis-headless-service"
    redis_port: "6379"
    redis_user: ""
    redis_cache_db: "1"
    redis_celery_db: "0"
    redis_ssl:
      enabled: false
      ssl_cert_reqs: CERT_NONE

    # Postgresql Configs 
    db_host: "{{ .Release.Name }}-postgres"
    db_port: "5432"
    db_user: superset_user
    db_pass: superset
    db_name: superset

  forceReload: false

  initContainers:
    - name: wait-for-postgres
      image: "{{ .Values.initImage.repository }}:{{ .Values.initImage.tag }}"
      imagePullPolicy: "{{ .Values.initImage.pullPolicy }}"
      envFrom:
        - secretRef:
            name: '{{ template "superset.fullname" . }}-env'
      command:
        - /bin/sh
        - -c
        - dockerize -wait "tcp://$DB_HOST:$DB_PORT" -timeout 120s

  startupProbe:
    httpGet:
      path: /health
      port: http
    initialDelaySeconds: 15
    timeoutSeconds: 1
    failureThreshold: 60
    periodSeconds: 5
    successThreshold: 1

  livenessProbe:
    httpGet:
      path: /health
      port: http
    initialDelaySeconds: 15
    timeoutSeconds: 1
    failureThreshold: 3
    periodSeconds: 15
    successThreshold: 1

  readinessProbe:
    httpGet:
      path: /health
      port: http
    initialDelaySeconds: 15
    timeoutSeconds: 1
    failureThreshold: 3
    periodSeconds: 15
    successThreshold: 1

  resources:
    requests:
      cpu: 250m
      memory: 250Mi 
    limits:
      cpu: 500m
      memory: 500Mi


  strategy: {}
    # type: RollingUpdate
    # rollingUpdate:
    #   maxSurge: 25%
    #   maxUnavailable: 25%

# Superset Celery Worker Configs
supersetWorker:
  replicas:
    enabled: true
    replicaCount: 1

  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80

  podDisruptionBudget:
    enabled: false
    minAvailable: 1
    # maxUnavailable: 1

  command:
    - "/bin/sh"
    - "-c"
    - ". {{ .Values.configMountPath }}/superset_bootstrap.sh; celery --app=superset.tasks.celery_app:app worker"

  forceReload: false

  initContainers:
    - name: wait-for-postgres-redis
      image: "{{ .Values.initImage.repository }}:{{ .Values.initImage.tag }}"
      imagePullPolicy: "{{ .Values.initImage.pullPolicy }}"
      envFrom:
        - secretRef:
            name: '{{ template "superset.fullname" . }}-env'
      command:
        - /bin/sh
        - -c
        - dockerize -wait "tcp://$DB_HOST:$DB_PORT" -wait "tcp://$REDIS_HOST:$REDIS_PORT" -timeout 120s

  resources: 
    requests:
      cpu: 250m
      memory: 250Mi 
    limits:
      cpu: 500m
      memory: 1000Mi

  strategy: {}
    # type: RollingUpdate
    # rollingUpdate:
    #   maxSurge: 25%
    #   maxUnavailable: 25%

  livenessProbe:
    exec:
      command:
        - sh
        - -c
        - celery -A superset.tasks.celery_app:app inspect ping -d celery@$HOSTNAME
    initialDelaySeconds: 120
    timeoutSeconds: 60
    failureThreshold: 3
    periodSeconds: 60
    successThreshold: 1

  startupProbe: {}
  readinessProbe: {}
  priorityClassName: ~

# SuperSet Celery Beat Configs
supersetCeleryBeat:
  enabled: false

  podDisruptionBudget:
    enabled: false
    minAvailable: 1
    # maxUnavailable: 1

  command:
    - "/bin/sh"
    - "-c"
    - ". {{ .Values.configMountPath }}/superset_bootstrap.sh; celery --app=superset.tasks.celery_app:app beat --pidfile /tmp/celerybeat.pid --schedule /tmp/celerybeat-schedule"
  
  forceReload: false

  initContainers:
    - name: wait-for-postgres-redis
      image: "{{ .Values.initImage.repository }}:{{ .Values.initImage.tag }}"
      imagePullPolicy: "{{ .Values.initImage.pullPolicy }}"
      envFrom:
        - secretRef:
            name: '{{ template "superset.fullname" . }}-env'
      command:
        - /bin/sh
        - -c
        - dockerize -wait "tcp://$DB_HOST:$DB_PORT" -wait "tcp://$REDIS_HOST:$REDIS_PORT" -timeout 120s

  resources:
    requests:
      cpu: 250m
      memory: 250Mi 
    limits:
      cpu: 500m
      memory: 500Mi

  priorityClassName: ~

# SuperSet Celery Flower Configs
supersetCeleryFlower:
  enabled: false
  
  replicaCount: 1

  podDisruptionBudget:
    enabled: false
    minAvailable: 1
    # maxUnavailable: 1

  command:
    - "/bin/sh"
    - "-c"
    - pip install psycopg2-binary==2.9.6 
    - "celery --app=superset.tasks.celery_app:app flower"
    
  service:
    type: ClusterIP
    port: 5555

  startupProbe:
    httpGet:
      path: /api/workers
      port: flower
    initialDelaySeconds: 5
    timeoutSeconds: 1
    failureThreshold: 60
    periodSeconds: 5
    successThreshold: 1

  livenessProbe:
    httpGet:
      path: /api/workers
      port: flower
    initialDelaySeconds: 5
    timeoutSeconds: 1
    failureThreshold: 3
    periodSeconds: 5
    successThreshold: 1

  readinessProbe:
    httpGet:
      path: /api/workers
      port: flower
    initialDelaySeconds: 5
    timeoutSeconds: 1
    failureThreshold: 3
    periodSeconds: 5
    successThreshold: 1

  initContainers:
    - name: wait-for-postgres-redis
      image: "{{ .Values.initImage.repository }}:{{ .Values.initImage.tag }}"
      imagePullPolicy: "{{ .Values.initImage.pullPolicy }}"
      envFrom:
        - secretRef:
            name: '{{ template "superset.fullname" . }}-env'
      command:
        - /bin/sh
        - -c
        - dockerize -wait "tcp://$DB_HOST:$DB_PORT" -wait "tcp://$REDIS_HOST:$REDIS_PORT" -timeout 120s

  resources:
    requests:
      cpu: 250m
      memory: 250Mi 
    limits:
      cpu: 500m
      memory: 500Mi

  priorityClassName: ~

# SuperSet Web Sockets Configs
supersetWebsockets:
  enabled: false
  replicaCount: 1

  podDisruptionBudget:
    enabled: false
    minAvailable: 1
    # maxUnavailable: 1

  image:
    repository: oneacrefund/superset-websocket
    tag: latest
    pullPolicy: IfNotPresent

  config:
    {
      "port": 8080,
      "logLevel": "debug",
      "logToFile": false,
      "logFilename": "app.log",
      "statsd": { "host": "127.0.0.1", "port": 8125, "globalTags": [] },
      "redis":
        {
          "port": 6379,
          "host": "127.0.0.1",
          "password": "",
          "db": 0,
          "ssl": false,
        },
      "redisStreamPrefix": "async-events-",
      "jwtSecret": "add-your-jwt", 
      "jwtCookieName": "async-token",
    }
  service:
    type: ClusterIP
    port: 8080

  command: []
  resources:
    requests:
      cpu: 250m
      memory: 250Mi 
    limits:
      cpu: 500m
      memory: 500Mi
  strategy: {}

  startupProbe:
    httpGet:
      path: /health
      port: ws
    initialDelaySeconds: 5
    timeoutSeconds: 1
    failureThreshold: 60
    periodSeconds: 5
    successThreshold: 1

  livenessProbe:
    httpGet:
      path: /health
      port: ws
    initialDelaySeconds: 5
    timeoutSeconds: 1
    failureThreshold: 3
    periodSeconds: 5
    successThreshold: 1

  readinessProbe:
    httpGet:
      path: /health
      port: ws
    initialDelaySeconds: 5
    timeoutSeconds: 1
    failureThreshold: 3
    periodSeconds: 5
    successThreshold: 1

  priorityClassName: ~

# SuperSet init DB Configs 
init:
  enabled: true
  resources:
    requests:
      cpu: 250m
      memory: 250Mi 
    limits:
      cpu: 500m
      memory: 500Mi

  command:
    - "/bin/sh"
    - "-c"
    - ". {{ .Values.configMountPath }}/superset_bootstrap.sh; . {{ .Values.configMountPath }}/superset_init.sh"

  
  createAdmin: true
  adminUser:
    username: admin
    firstname: Superset
    lastname: Admin
    email: admin@superset.com
    password: admin
    
  jobAnnotations:
    "helm.sh/hook": post-install,post-upgrade
    "helm.sh/hook-delete-policy": "before-hook-creation"
  loadExamples: false

  initContainers:
    - name: wait-for-postgres
      image: "{{ .Values.initImage.repository }}:{{ .Values.initImage.tag }}"
      imagePullPolicy: "{{ .Values.initImage.pullPolicy }}"
      envFrom:
        - secretRef:
            name: '{{ template "superset.fullname" . }}-env'
      command:
        - /bin/sh
        - -c
        - dockerize -wait "tcp://$DB_HOST:$DB_PORT" -timeout 120s

  initscript: |-
    #!/bin/sh
    set -eu
    echo "Upgrading DB schema..."
    superset db upgrade
    echo "Initializing roles..."
    superset init
    {{ if .Values.init.createAdmin }}
    echo "Creating admin user..."
    superset fab create-admin \
                    --username {{ .Values.init.adminUser.username }} \
                    --firstname {{ .Values.init.adminUser.firstname }} \
                    --lastname {{ .Values.init.adminUser.lastname }} \
                    --email {{ .Values.init.adminUser.email }} \
                    --password {{ .Values.init.adminUser.password }} \
                    || true
    {{- end }}
    {{ if .Values.init.loadExamples }}
    echo "Loading examples..."
    superset load_examples
    {{- end }}
    if [ -f "{{ .Values.extraConfigMountPath }}/import_datasources.yaml" ]; then
      echo "Importing database connections.... "
      superset import_datasources -p {{ .Values.extraConfigMountPath }}/import_datasources.yaml
    fi

  priorityClassName: ~

priorityClassName: ~

# Dependency charts
postgres:
  enabled: true
  postgresRootPassword: "superset"
  services:
    - name : superset
      password : superset
      database : superset

redis:
  enabled: true

host : 

tlsHost : 

tlsSecretName : 