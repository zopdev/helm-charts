{{- $secretName := printf "%s-login-credentials" .Release.Name }}

{{/* Generate a strong password only if not already set */}}
{{- $generatedPassword := printf "%s%s%s" (randAlpha 4) (randNumeric 4) (randAlpha 4 | upper) }}

{{/* Generate a random username with "admin-" prefix and exactly 4 random characters */}}
{{- $randomUsername := printf "admin-%s" (randAlphaNum 4) }}

{{- $password := $generatedPassword }}
{{- $username := $randomUsername }}

---
apiVersion: v1
kind: Secret
metadata:
  name: {{ $secretName }}
  namespace: {{ .Release.Namespace }}
type: Opaque
data:
  {{- if .Release.IsInstall }}
  USERNAME: {{ $username | b64enc }}
  PASSWORD: {{ $password | b64enc }}
  FIRSTNAME: {{ "Superset" | b64enc }}
  LASTNAME: {{ "Admin" | b64enc }}
  EMAIL: {{ "admin@superset.com" | b64enc }}
    {{ else }}
  USERNAME: {{ index (lookup "v1" "Secret" .Release.Namespace  $secretName ).data "USERNAME" }}
  PASSWORD: {{ index (lookup "v1" "Secret" .Release.Namespace  $secretName ).data "PASSWORD" }}
  FIRSTNAME: {{ index (lookup "v1" "Secret" .Release.Namespace  $secretName ).data "FIRSTNAME" }}
  LASTNAME: {{ index (lookup "v1" "Secret" .Release.Namespace  $secretName ).data "LASTNAME" }}
  EMAIL: {{ index (lookup "v1" "Secret" .Release.Namespace  $secretName ).data "EMAIL" }}
    {{ end }} 
