{{- $secretName := printf "%s-postgres-root-secret" .Release.Name }}

{{/* Generate a strong root password only if not already set */}}
{{- $generatedRootPassword := printf "%s%s%s" (randAlpha 4) (randNumeric 4) (randAlpha 4 | upper) }}
{{- $generatedReplicaPassword := printf "%s%s%s" (randAlpha 4) (randNumeric 4) (randAlpha 4 | upper) }}

{{- $rootPassword := $generatedRootPassword }}
{{- $replicaPassword := $generatedReplicaPassword }}
---
apiVersion: v1
kind: Secret
metadata:
  name: {{ $secretName }}
  labels:
    app: {{ template "postgresql.name" . }}
    chart: {{ template "postgresql.chart" . }}
    release: {{ .Release.Name | quote }}
    heritage: {{ .Release.Service | quote }}
type: Opaque
data:
  {{- if .Release.IsInstall }}
  postgres-password: {{ $rootPassword | b64enc }}
  {{ else }}
  postgres-password: {{ index (lookup "v1" "Secret" .Release.Namespace $secretName ).data "postgres-password" }}
  {{ end }}

  {{- if .Values.replication.enabled }}
  {{- $replicaSecret := (lookup "v1" "Secret" .Release.Namespace $secretName) }}
  {{- if and $replicaSecret (hasKey $replicaSecret "data") (hasKey $replicaSecret.data "postgresql-replication-password") }}
  postgresql-replication-password: {{ index $replicaSecret.data "postgresql-replication-password" }}
  {{- else }}
  postgresql-replication-password: {{ $replicaPassword | b64enc }}
  {{- end }}
  {{- end }}