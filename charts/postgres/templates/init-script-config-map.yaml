{{- range $index, $service := .Values.services }}
{{- $maxLen := 27 }}
{{- $randomSuffix := randAlphaNum 4 | lower }}
{{- $trimmedName := trunc $maxLen $service.name }}
{{- $generatedUsername := printf "%s-%s_user" $trimmedName $randomSuffix }}
{{- $generatedPassword := printf "%s%s%s" (randAlpha 4) (randNumeric 4) (randAlpha 4 | upper) }}

{{/* Define Secret Name */}}
{{- $secretName := printf "%s-%s-%s-postgres-database-secret" $.Release.Name (replace "_" "-" $service.database) $service.name }}

{{/* Retrieve existing secret (if any) */}}
{{- $existingSecret := lookup "v1" "Secret" $.Release.Namespace $secretName }}

{{/* Use existing values if available, otherwise generate new ones */}}
{{- $username := $generatedUsername }}
{{- $password := $generatedPassword }}

{{- if $existingSecret }}
  {{- with $existingSecret.data }}
    {{- if hasKey . "DB_USER" }}
      {{- $username = index . "DB_USER" | b64dec }}
    {{- end }}
    {{- if hasKey . "DB_PASSWORD" }}
      {{- $password = index . "DB_PASSWORD" | b64dec }}
    {{- end }}
  {{- end }}
{{- end }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ $.Release.Name }}-{{ replace "_" "-" $service.database }}-{{ $service.name }}-postgres-configmap
  namespace: {{ $.Release.Namespace }}
data:
  DB_DIALECT: "postgres"
  DB_USER: "{{ $username }}"
  DB_PORT: "5432"
  DB_NAME: "{{ $service.database }}"
  DB_HOST: "{{ $.Release.Name }}-postgres"
---
apiVersion: v1
kind: Secret
metadata:
  name: {{ $secretName }}
  namespace: {{ $.Release.Namespace }}
type: Opaque
data:
  DB_USER: {{ $username | b64enc }}
  DB_PASSWORD: {{ $password | b64enc }}
  DATABASE_URL: {{ printf "postgres://%s:%s@%s-postgres:5432/%s" $username $password $.Release.Name $service.database | b64enc }}
---
apiVersion: v1
kind: Pod
metadata:
  name: postgres-{{ $.Release.Name }}-{{ $service.name }}-init-job
  namespace: {{ $.Release.Namespace }}
spec:
  containers:
    - name: postgres-init-role
      image: docker.io/bitnami/postgresql:{{ $.Values.version }}
      command: ["/bin/bash"]
      args:
        - "-c"
        - |
          sleep 20
          POSTGRES_PASSWORD="$PGPASSWORD"
          psql -h {{ $.Release.Name }}-postgres -U postgres -c "
            CREATE EXTENSION IF NOT EXISTS dblink;
            DO \$\$
            BEGIN
              IF NOT EXISTS (SELECT 1 FROM pg_database WHERE datname = '{{ $service.database }}') THEN
                PERFORM dblink_exec(
                  'host={{ $.Release.Name }}-postgres user=postgres password=$POSTGRES_PASSWORD',
                  'CREATE DATABASE \"{{ $service.database }}\";'
                );
              END IF;
            END
            \$\$;
          "
          psql -h {{ $.Release.Name }}-postgres -U postgres -d {{ $service.database }} -c "
            REVOKE ALL ON SCHEMA public FROM PUBLIC;
            DO \$do\$
            BEGIN
              IF NOT EXISTS (SELECT FROM pg_catalog.pg_roles WHERE rolname = '{{ $username }}') THEN
                CREATE USER \"{{ $username }}\" WITH ENCRYPTED PASSWORD '{{ $password }}';
                BEGIN
                  GRANT CONNECT, CREATE ON DATABASE \"{{ $service.database }}\" TO \"{{ $username }}\";
                EXCEPTION WHEN OTHERS THEN
                  RAISE NOTICE 'Error granting database privileges: %', SQLERRM;
                  RAISE;
                END;
                BEGIN
                  GRANT CREATE, USAGE ON SCHEMA public TO \"{{ $username }}\";
                EXCEPTION WHEN OTHERS THEN
                  RAISE NOTICE 'Error granting schema privileges: %', SQLERRM;
                  RAISE;
                END;
                BEGIN
                  ALTER DEFAULT PRIVILEGES FOR USER postgres IN SCHEMA public
                  GRANT INSERT, REFERENCES, SELECT, UPDATE, DELETE, TRUNCATE ON TABLES TO \"{{ $username }}\";
                EXCEPTION WHEN OTHERS THEN
                  RAISE NOTICE 'Error granting table privileges: %', SQLERRM;
                  RAISE;
                END;
                BEGIN
                  ALTER DEFAULT PRIVILEGES FOR USER postgres IN SCHEMA public
                  GRANT SELECT, UPDATE ON SEQUENCES TO \"{{ $username }}\";
                EXCEPTION WHEN OTHERS THEN
                  RAISE NOTICE 'Error granting sequence privileges: %', SQLERRM;
                  RAISE;
                END;
              ELSE
                ALTER USER \"{{ $username }}\" PASSWORD '{{ $password }}';
              END IF;
            END
            \$do\$;
          "
      env:
        - name: PGPASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ $.Release.Name }}-postgres-root-secret
              key: postgres-password
  restartPolicy: OnFailure
---
{{- end }}