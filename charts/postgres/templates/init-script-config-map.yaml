{{- range $index, $service := .Values.services }}
{{- $maxLen := 27 }}
{{- $randomSuffix := randAlphaNum 4 | lower }}
{{- $trimmedName := trunc $maxLen $service.name }}
{{- $generatedUsername := printf "%s-%s_user" $trimmedName $randomSuffix }}
{{- $generatedPassword := printf "%s%s%s" (randAlpha 4) (randNumeric 4) (randAlpha 4 | upper) }}

{{/* Define Secret Name */}}
{{- $secretName := printf "%s-%s-%s-postgres-database-secret" $.Release.Name (replace "_" "-" $service.database) $service.name }}

{{/* Retrieve existing secret (if any) */}}
{{- $existingSecret := lookup "v1" "Secret" $.Release.Namespace $secretName }}

{{/* Use existing values if available, otherwise generate new ones */}}
{{- $username := $generatedUsername }}
{{- $password := $generatedPassword }}

{{- if $existingSecret }}
  {{- with $existingSecret.data }}
    {{- if hasKey . "DB_USER" }}
      {{- $username = index . "DB_USER" | b64dec }}
    {{- end }}
    {{- if hasKey . "DB_PASSWORD" }}
      {{- $password = index . "DB_PASSWORD" | b64dec }}
    {{- end }}
  {{- end }}
{{- end }}

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ $.Release.Name }}-{{ $service.name }}-init-script
  namespace: {{ $.Release.Namespace }}
data:
  db-init.sql: |
    CREATE EXTENSION IF NOT EXISTS dblink;
    DO $$ BEGIN
      IF NOT EXISTS (SELECT 1 FROM pg_database WHERE datname = '{{ $service.database }}') THEN
        PERFORM dblink_exec('dbname=postgres', 'CREATE DATABASE "{{ $service.database }}"');
    END IF;
    END $$;

    \connect {{ $service.database }}

    REVOKE ALL ON SCHEMA public FROM PUBLIC;
    DO
    $do$
    BEGIN
      IF NOT EXISTS (
        SELECT FROM pg_catalog.pg_roles WHERE rolname = '{{ $username }}'
      ) THEN
        CREATE USER "{{ $username }}" WITH ENCRYPTED PASSWORD '{{ $password }}';

    ELSE
        ALTER USER "{{ $username }}" PASSWORD '{{ $password }}';
    END IF;
    END
    $do$;
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ $.Release.Name }}-{{ replace "_" "-" $service.database }}-{{ $service.name }}-postgres-configmap
  namespace: {{ $.Release.Namespace }}
data:
  DB_DIALECT: "postgres"
  DB_USER: "{{ $username }}"
  DB_PORT: "5432"
  DB_NAME: "{{ $service.database }}"
  DB_HOST: "{{ $.Release.Name }}-postgres"
---
apiVersion: v1
kind: Secret
metadata:
  name: {{ $secretName }}
  namespace: {{ $.Release.Namespace }}
type: Opaque
data:
  DB_USER: {{ $username | b64enc }}
  DB_PASSWORD: {{ $password | b64enc }}
  DATABASE_URL: {{ printf "postgres://%s:%s@%s-postgres:5432/%s" $username $password $.Release.Name $service.database | b64enc }}
---
{{- end }}