apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ .Release.Name }}-cassandra
  namespace: {{ .Release.Namespace }}
  labels:
    app: {{ .Release.Name }}-cassandra
spec:
  replicas: 1
  serviceName: {{ .Release.Name }}-cassandra
  selector:
    matchLabels:
      app: {{ .Release.Name }}-cassandra
  template:
    metadata:
      labels:
        app: {{ .Release.Name }}-cassandra
    spec:
      containers:
        - name: cassandra
          image: "bitnami/cassandra:5.0.2-debian-12-r3"
          imagePullPolicy: IfNotPresent
          command:
            - bash
            - -ec
            - |
              # Node 0 is the password seeder
              if [[ $POD_NAME =~ (.*)-0$ ]]; then
                echo "Setting node as password seeder"
                export CASSANDRA_PASSWORD_SEEDER=yes
              else
                # Only node 0 will execute the startup initdb scripts
                export CASSANDRA_IGNORE_INITDB_SCRIPTS=1
              fi
              /opt/bitnami/scripts/cassandra/entrypoint.sh /opt/bitnami/scripts/cassandra/run.sh
          ports:
            - containerPort: 9042
          resources:
            requests:
              memory: {{ .Values.resources.requests.memory }}
              cpu: {{ .Values.resources.requests.cpu }}
            limits:
              memory: {{ .Values.resources.limits.memory }}
              cpu: {{ .Values.resources.limits.cpu }}
          env:
            - name: CASSANDRA_CLUSTER_NAME
              value: "Cluster"
            - name: CASSANDRA_NUM_TOKENS
              value: 256"
            - name: CASSANDRA_SEEDS
              value: dc1
            - name: CASSANDRA_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ $.Release.Name }}-cassandra-database-secret
                  key: pod_password
            - name: CASSANDRA_USER
              value: "superuser"
            - name: CASSANDRA_DATACENTER
              value: dc1
            - name: CASSANDRA_RACK
              value: rack1
            - name: CASSANDRA_KEYSTORE_LOCATION
              value: "/opt/bitnami/cassandra/certs/keystore"
            - name: CASSANDRA_TRUSTSTORE_LOCATION
              value: "/opt/bitnami/cassandra/certs/truststore"
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
          lifecycle:
            preStop:
              exec:
                command: 
                - /bin/sh
                - -c
                - nodetool drain
          livenessProbe:
            exec:
              command:
              - sh
              - -c
              - "nodetool status"
            initialDelaySeconds: 120
            periodSeconds: 20
            timeoutSeconds: 15
            failureThreshold: 3
          readinessProbe:
            exec:
              command:
              - sh
              - -c
              - "nodetool status"
            initialDelaySeconds: 60
            periodSeconds: 20
            timeoutSeconds: 15
            failureThreshold: 3
          volumeMounts:
            - name: {{.Release.Name }}-cassandra-data
              mountPath: /var/lib/cassandra
            - name: empty-dir
              mountPath: /tmp
              subPath: tmp-dir
            - name: empty-dir
              mountPath: /opt/bitnami/cassandra/conf
              subPath: app-conf-dir
            - name: empty-dir
              mountPath: /opt/bitnami/cassandra/tmp
              subPath: app-tmp-dir
      volumes:
        - name: empty-dir
          emptyDir: {}
  volumeClaimTemplates:
    - metadata:
        name: {{.Release.Name }}-cassandra-data
      spec:
        accessModes: ["ReadWriteOnce"]
        resources:
          requests:
            storage: {{ .Values.diskSize }}
        storageClassName: standard